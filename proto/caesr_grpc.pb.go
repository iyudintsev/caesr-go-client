// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.0
// source: caesr.proto

package caesr_go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CaesrService_Recognize_FullMethodName = "/caesr.CaesrService/Recognize"
)

// CaesrServiceClient is the client API for CaesrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaesrServiceClient interface {
	Recognize(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CaesrRequest, CaesrResponse], error)
}

type caesrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaesrServiceClient(cc grpc.ClientConnInterface) CaesrServiceClient {
	return &caesrServiceClient{cc}
}

func (c *caesrServiceClient) Recognize(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CaesrRequest, CaesrResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CaesrService_ServiceDesc.Streams[0], CaesrService_Recognize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CaesrRequest, CaesrResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CaesrService_RecognizeClient = grpc.BidiStreamingClient[CaesrRequest, CaesrResponse]

// CaesrServiceServer is the server API for CaesrService service.
// All implementations must embed UnimplementedCaesrServiceServer
// for forward compatibility.
type CaesrServiceServer interface {
	Recognize(grpc.BidiStreamingServer[CaesrRequest, CaesrResponse]) error
	mustEmbedUnimplementedCaesrServiceServer()
}

// UnimplementedCaesrServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaesrServiceServer struct{}

func (UnimplementedCaesrServiceServer) Recognize(grpc.BidiStreamingServer[CaesrRequest, CaesrResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedCaesrServiceServer) mustEmbedUnimplementedCaesrServiceServer() {}
func (UnimplementedCaesrServiceServer) testEmbeddedByValue()                      {}

// UnsafeCaesrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaesrServiceServer will
// result in compilation errors.
type UnsafeCaesrServiceServer interface {
	mustEmbedUnimplementedCaesrServiceServer()
}

func RegisterCaesrServiceServer(s grpc.ServiceRegistrar, srv CaesrServiceServer) {
	// If the following call pancis, it indicates UnimplementedCaesrServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaesrService_ServiceDesc, srv)
}

func _CaesrService_Recognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CaesrServiceServer).Recognize(&grpc.GenericServerStream[CaesrRequest, CaesrResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CaesrService_RecognizeServer = grpc.BidiStreamingServer[CaesrRequest, CaesrResponse]

// CaesrService_ServiceDesc is the grpc.ServiceDesc for CaesrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaesrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caesr.CaesrService",
	HandlerType: (*CaesrServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Recognize",
			Handler:       _CaesrService_Recognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "caesr.proto",
}
